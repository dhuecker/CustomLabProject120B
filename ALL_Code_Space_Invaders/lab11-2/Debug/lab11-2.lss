
lab11-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  000006e4  00000778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  008001ac  008001ac  00000824  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001082  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a57  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a83  00000000  00000000  0000242d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000584  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000851  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e6 c0       	rjmp	.+460    	; 0x202 <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7f 02       	muls	r23, r31
  8e:	46 02       	muls	r20, r22
  90:	4d 02       	muls	r20, r29
  92:	54 02       	muls	r21, r20
  94:	5b 02       	muls	r21, r27
  96:	62 02       	muls	r22, r18
  98:	69 02       	muls	r22, r25
  9a:	70 02       	muls	r23, r16
  9c:	81 02       	muls	r24, r17
  9e:	48 02       	muls	r20, r24
  a0:	4f 02       	muls	r20, r31
  a2:	56 02       	muls	r21, r22
  a4:	5d 02       	muls	r21, r29
  a6:	64 02       	muls	r22, r20
  a8:	6b 02       	muls	r22, r27
  aa:	70 02       	muls	r23, r16

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 ee       	ldi	r30, 0xE4	; 228
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	ac 3a       	cpi	r26, 0xAC	; 172
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	ac ea       	ldi	r26, 0xAC	; 172
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a3 3c       	cpi	r26, 0xC3	; 195
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	2f d1       	rcall	.+606    	; 0x342 <main>
  e4:	fd c2       	rjmp	.+1530   	; 0x6e0 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  e8:	18 16       	cp	r1, r24
  ea:	19 06       	cpc	r1, r25
  ec:	5c f0       	brlt	.+22     	; 0x104 <delay_ms+0x1c>
  ee:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  f0:	00 00       	nop
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  f6:	e1 f7       	brne	.-8      	; 0xf0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  f8:	4f 5f       	subi	r20, 0xFF	; 255
  fa:	5f 4f       	sbci	r21, 0xFF	; 255
  fc:	84 17       	cp	r24, r20
  fe:	95 07       	cpc	r25, r21
 100:	19 f4       	brne	.+6      	; 0x108 <delay_ms+0x20>
 102:	08 95       	ret
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 108:	27 e0       	ldi	r18, 0x07	; 7
 10a:	33 e0       	ldi	r19, 0x03	; 3
 10c:	f1 cf       	rjmp	.-30     	; 0xf0 <delay_ms+0x8>

0000010e <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 10e:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 110:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 112:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 114:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 116:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	e5 cf       	rjmp	.-54     	; 0xe8 <delay_ms>
 11e:	08 95       	ret

00000120 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	f5 cf       	rjmp	.-22     	; 0x10e <LCD_WriteCommand>
 124:	08 95       	ret

00000126 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 126:	81 31       	cpi	r24, 0x11	; 17
 128:	18 f4       	brcc	.+6      	; 0x130 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 12a:	81 58       	subi	r24, 0x81	; 129
 12c:	f0 cf       	rjmp	.-32     	; 0x10e <LCD_WriteCommand>
 12e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 130:	81 55       	subi	r24, 0x51	; 81
 132:	ed cf       	rjmp	.-38     	; 0x10e <LCD_WriteCommand>
 134:	08 95       	ret

00000136 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 136:	84 e6       	ldi	r24, 0x64	; 100
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	d6 df       	rcall	.-84     	; 0xe8 <delay_ms>
	LCD_WriteCommand(0x38);
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	e7 df       	rcall	.-50     	; 0x10e <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	e5 df       	rcall	.-54     	; 0x10e <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	e3 df       	rcall	.-58     	; 0x10e <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	e1 df       	rcall	.-62     	; 0x10e <LCD_WriteCommand>
	delay_ms(10);						 
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	cb cf       	rjmp	.-106    	; 0xe8 <delay_ms>
 152:	08 95       	ret

00000154 <LCD_WriteData>:
 154:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 156:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 158:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 15a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 15c:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	c2 cf       	rjmp	.-124    	; 0xe8 <delay_ms>
 164:	08 95       	ret

00000166 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	18 2f       	mov	r17, r24
 170:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 172:	d6 df       	rcall	.-84     	; 0x120 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 174:	88 81       	ld	r24, Y
 176:	88 23       	and	r24, r24
 178:	51 f0       	breq	.+20     	; 0x18e <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 17a:	01 e0       	ldi	r16, 0x01	; 1
 17c:	01 0f       	add	r16, r17
 17e:	81 2f       	mov	r24, r17
 180:	d2 df       	rcall	.-92     	; 0x126 <LCD_Cursor>
      LCD_WriteData(*string++);
 182:	89 91       	ld	r24, Y+
 184:	e7 df       	rcall	.-50     	; 0x154 <LCD_WriteData>
 186:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 188:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 18a:	81 11       	cpse	r24, r1
 18c:	f6 cf       	rjmp	.-20     	; 0x17a <LCD_DisplayString+0x14>
 18e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <TimerSet>:
 198:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
	
	return '\0';
}
 19c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 1a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 1a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 1a8:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <__data_end>
 1ac:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <__data_end+0x1>
 1b0:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end+0x2>
 1b4:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__data_end+0x3>
 1b8:	08 95       	ret

000001ba <TimerOn>:
 1ba:	8b e0       	ldi	r24, 0x0B	; 11
 1bc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1c0:	8d e7       	ldi	r24, 0x7D	; 125
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1d6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 1de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 1e2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 1e6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 1ea:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
 1ee:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
 1f2:	a0 93 ae 01 	sts	0x01AE, r26	; 0x8001ae <__data_end+0x2>
 1f6:	b0 93 af 01 	sts	0x01AF, r27	; 0x8001af <__data_end+0x3>
 1fa:	8f b7       	in	r24, 0x3f	; 63
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	8f bf       	out	0x3f, r24	; 63
 200:	08 95       	ret

00000202 <__vector_13>:
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
 218:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__data_end+0x1>
 21c:	a0 91 ae 01 	lds	r26, 0x01AE	; 0x8001ae <__data_end+0x2>
 220:	b0 91 af 01 	lds	r27, 0x01AF	; 0x8001af <__data_end+0x3>
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	a1 09       	sbc	r26, r1
 228:	b1 09       	sbc	r27, r1
 22a:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
 22e:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
 232:	a0 93 ae 01 	sts	0x01AE, r26	; 0x8001ae <__data_end+0x2>
 236:	b0 93 af 01 	sts	0x01AF, r27	; 0x8001af <__data_end+0x3>
 23a:	89 2b       	or	r24, r25
 23c:	8a 2b       	or	r24, r26
 23e:	8b 2b       	or	r24, r27
 240:	99 f4       	brne	.+38     	; 0x268 <__vector_13+0x66>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <TimerFlag>
 248:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 24c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 250:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 254:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 258:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
 25c:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__data_end+0x1>
 260:	a0 93 ae 01 	sts	0x01AE, r26	; 0x8001ae <__data_end+0x2>
 264:	b0 93 af 01 	sts	0x01AF, r27	; 0x8001af <__data_end+0x3>
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <ADC_init>:
#include "timer.h"
#include "keypad.h"
#include "io.h"

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 27a:	ea e7       	ldi	r30, 0x7A	; 122
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	80 6e       	ori	r24, 0xE0	; 224
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <tick_LCD>:
							
int check = 16;
int j = 16;
enum STATES {Start, Stop, Display}state;
	int temp = 0;
void tick_LCD (){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	switch(state)
 28a:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <state>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	09 f4       	brne	.+2      	; 0x294 <tick_LCD+0xe>
 292:	4d c0       	rjmp	.+154    	; 0x32e <tick_LCD+0xa8>
 294:	18 f0       	brcs	.+6      	; 0x29c <tick_LCD+0x16>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	29 f0       	breq	.+10     	; 0x2a4 <tick_LCD+0x1e>
 29a:	4e c0       	rjmp	.+156    	; 0x338 <tick_LCD+0xb2>
	{
		case Start:
			state = Display;
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <state>
			break;
 2a2:	4c c0       	rjmp	.+152    	; 0x33c <tick_LCD+0xb6>
			
		case Display:
			if (~PINA == 0x01){
 2a4:	80 b1       	in	r24, 0x00	; 0
			}
			else
			state = Display;
		
			
			for(i =1; i<=16; i++){
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <i>
				LCD_WriteData(DisStr[i]);
			
				
				if(check == 78)
				{
					check = 16;
 2ac:	c0 e1       	ldi	r28, 0x10	; 16
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
			else
			state = Display;
		
			
			for(i =1; i<=16; i++){
				DisStr [i] = LongStr[i -1 + check -16 ];
 2b0:	e8 2f       	mov	r30, r24
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	df 01       	movw	r26, r30
 2b6:	af 54       	subi	r26, 0x4F	; 79
 2b8:	be 4f       	sbci	r27, 0xFE	; 254
 2ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <check>
 2be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <check+0x1>
 2c2:	e2 0f       	add	r30, r18
 2c4:	f3 1f       	adc	r31, r19
 2c6:	e4 5b       	subi	r30, 0xB4	; 180
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	90 81       	ld	r25, Z
 2cc:	9c 93       	st	X, r25
				LCD_Cursor(i);
 2ce:	2b df       	rcall	.-426    	; 0x126 <LCD_Cursor>
				LCD_WriteData(DisStr[i]);
 2d0:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <i>
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ef 54       	subi	r30, 0x4F	; 79
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	80 81       	ld	r24, Z
 2dc:	3b df       	rcall	.-394    	; 0x154 <LCD_WriteData>
			
				
				if(check == 78)
 2de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <check>
 2e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <check+0x1>
 2e6:	8e 34       	cpi	r24, 0x4E	; 78
 2e8:	91 05       	cpc	r25, r1
 2ea:	21 f4       	brne	.+8      	; 0x2f4 <tick_LCD+0x6e>
				{
					check = 16;
 2ec:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <check+0x1>
 2f0:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <check>
			}
			else
			state = Display;
		
			
			for(i =1; i<=16; i++){
 2f4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <i>
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <i>
 2fe:	81 31       	cpi	r24, 0x11	; 17
 300:	b8 f2       	brcs	.-82     	; 0x2b0 <tick_LCD+0x2a>
			
				}
					
			}
				//j--;
				check++;
 302:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <check>
 306:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <check+0x1>
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <check+0x1>
 310:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <check>
				
				if(j ==1) {j =16;}
 314:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 318:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	71 f4       	brne	.+28     	; 0x33c <tick_LCD+0xb6>
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 32c:	07 c0       	rjmp	.+14     	; 0x33c <tick_LCD+0xb6>
		
			break;

		case Stop:
			state = Stop;
			LCD_DisplayString(1, "test");
 32e:	64 e1       	ldi	r22, 0x14	; 20
 330:	71 e0       	ldi	r23, 0x01	; 1
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	18 df       	rcall	.-464    	; 0x166 <LCD_DisplayString>
				break;
 336:	02 c0       	rjmp	.+4      	; 0x33c <tick_LCD+0xb6>
			
		default:
		state = Start;
 338:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <state>
		break;
	}
}
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <main>:
	


int main(void)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	2f 97       	sbiw	r28, 0x0f	; 15
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00;
 356:	1f ef       	ldi	r17, 0xFF	; 255
 358:	14 b9       	out	0x04, r17	; 4
 35a:	15 b8       	out	0x05, r1	; 5
	DDRA = 0xFF; PORTA = 0x00;
 35c:	11 b9       	out	0x01, r17	; 1
 35e:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xFF; PORTC = 0X00;
 360:	17 b9       	out	0x07, r17	; 7
 362:	18 b8       	out	0x08, r1	; 8
	DDRD = 0XFF; PORTD = 0X00;
 364:	1a b9       	out	0x0a, r17	; 10
 366:	1b b8       	out	0x0b, r1	; 11
	int trig = 0;
	int i = 0;
	int drop = 0;
	int move = 0;
	int dead = 0;
	unsigned char score [12] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'};
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	e8 e0       	ldi	r30, 0x08	; 8
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	de 01       	movw	r26, r28
 370:	11 96       	adiw	r26, 0x01	; 1
 372:	01 90       	ld	r0, Z+
 374:	0d 92       	st	X+, r0
 376:	8a 95       	dec	r24
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x30>
	unsigned char temp = 0;
	int past = 200;
	TimerSet(200);
 37a:	68 ec       	ldi	r22, 0xC8	; 200
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0a df       	rcall	.-492    	; 0x198 <TimerSet>
	TimerOn();
 384:	1a df       	rcall	.-460    	; 0x1ba <TimerOn>
	LCD_init();
 386:	d7 de       	rcall	.-594    	; 0x136 <LCD_init>
 388:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	//PWM_on();
	
		unsigned short x = ADC;
 38c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 390:	9f 87       	std	Y+15, r25	; 0x0f
 392:	8e 87       	std	Y+14, r24	; 0x0e
		ADC_init();
 394:	72 df       	rcall	.-284    	; 0x27a <ADC_init>
 396:	15 b8       	out	0x05, r1	; 5
		unsigned short left = 700;
		unsigned short right = 300;
		int game = 0;
    /* Replace with your application code */
	PORTB = 0x00;
 398:	12 b9       	out	0x02, r17	; 2
	PORTA = (0xFF);
 39a:	1b b9       	out	0x0b, r17	; 11
	PORTD = 0xFF;
 39c:	c1 2c       	mov	r12, r1
	
		unsigned short x = ADC;
		ADC_init();
		unsigned short left = 700;
		unsigned short right = 300;
		int game = 0;
 39e:	d1 2c       	mov	r13, r1
 3a0:	0f 2e       	mov	r0, r31
	int drop = 0;
	int move = 0;
	int dead = 0;
	unsigned char score [12] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'};
	unsigned char temp = 0;
	int past = 200;
 3a2:	f8 ec       	ldi	r31, 0xC8	; 200
 3a4:	af 2e       	mov	r10, r31
 3a6:	b1 2c       	mov	r11, r1
 3a8:	f0 2d       	mov	r31, r0
 3aa:	e1 2c       	mov	r14, r1
	int sound = 0;
	int trig = 0;
	int i = 0;
	int drop = 0;
	int move = 0;
	int dead = 0;
 3ac:	f1 2c       	mov	r15, r1
 3ae:	61 2c       	mov	r6, r1
	DDRD = 0XFF; PORTD = 0X00;
	int sound = 0;
	int trig = 0;
	int i = 0;
	int drop = 0;
	int move = 0;
 3b0:	71 2c       	mov	r7, r1
 3b2:	00 e0       	ldi	r16, 0x00	; 0
	DDRC = 0xFF; PORTC = 0X00;
	DDRD = 0XFF; PORTD = 0X00;
	int sound = 0;
	int trig = 0;
	int i = 0;
	int drop = 0;
 3b4:	10 e0       	ldi	r17, 0x00	; 0
 3b6:	81 2c       	mov	r8, r1
	DDRA = 0xFF; PORTA = 0x00;
	DDRC = 0xFF; PORTC = 0X00;
	DDRD = 0XFF; PORTD = 0X00;
	int sound = 0;
	int trig = 0;
	int i = 0;
 3b8:	91 2c       	mov	r9, r1
 3ba:	20 e0       	ldi	r18, 0x00	; 0
	DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0xFF; PORTA = 0x00;
	DDRC = 0xFF; PORTC = 0X00;
	DDRD = 0XFF; PORTD = 0X00;
	int sound = 0;
	int trig = 0;
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	33 24       	eor	r3, r3
	TimerFlag = 0;
	past = past + 200;
		if (dead == 1 && past == 3000)
		{dead = 2;
		if (dead != 0)
		PORTB = 0xFF;
 3c0:	3a 94       	dec	r3
 3c2:	0f 2e       	mov	r0, r31
				break;
			}
			case 0:
			{
				PORTA = ~(0x00);
				PORTD = (0xA3);
 3c4:	f3 ea       	ldi	r31, 0xA3	; 163
 3c6:	2f 2e       	mov	r2, r31
 3c8:	f0 2d       	mov	r31, r0
 3ca:	44 24       	eor	r4, r4
						 
						 LCD_ClearScreen();
						 LCD_DisplayString(1, "You Lost!");
						 trig = 0;
						 drop = 0;
						 game = 1;
 3cc:	43 94       	inc	r4
 3ce:	51 2c       	mov	r5, r1
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <main+0x98>
 3d2:	a1 2c       	mov	r10, r1
}
else if (trig ==1 && game == 1 && past == 2800 ||  dead == 3 && past == 2800 ){
	while(!TimerFlag);
	TimerFlag = 0;
		drop = drop + 1;
		past = 0;
 3d4:	b1 2c       	mov	r11, r1
 3d6:	e1 2c       	mov	r14, r1
		dead = 0;
 3d8:	f1 2c       	mov	r15, r1
 3da:	82 b1       	in	r24, 0x02	; 2
	PORTB = 0x00;
	PORTA = (0xFF);
	PORTD = 0xFF;
    while (1) 
    {	
		unsigned char temp = PORTA;
 3dc:	80 b1       	in	r24, 0x00	; 0
		//set_PWM(0);
		
		//if(temp != 0x02)
//		set_PWM(0);
		
		temp = ~PINA & 0x07;
 3de:	80 95       	com	r24
 3e0:	87 70       	andi	r24, 0x07	; 7
 3e2:	8d 87       	std	Y+13, r24	; 0x0d
 3e4:	82 30       	cpi	r24, 0x02	; 2
		
		
		
		if(temp == 0x02 || dead == 2){
 3e6:	29 f0       	breq	.+10     	; 0x3f2 <main+0xb0>
 3e8:	92 e0       	ldi	r25, 0x02	; 2
 3ea:	e9 16       	cp	r14, r25
 3ec:	f1 04       	cpc	r15, r1
 3ee:	81 f4       	brne	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f0:	3a c1       	rjmp	.+628    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
			LCD_ClearScreen();
 3f2:	96 de       	rcall	.-724    	; 0x120 <LCD_ClearScreen>
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
 3f4:	69 e1       	ldi	r22, 0x19	; 25
 3f6:	71 e0       	ldi	r23, 0x01	; 1
 3f8:	81 e0       	ldi	r24, 0x01	; 1
		i = 0;
		LCD_Cursor(29);
 3fa:	b5 de       	rcall	.-662    	; 0x166 <LCD_DisplayString>
 3fc:	8d e1       	ldi	r24, 0x1D	; 29
 3fe:	93 de       	rcall	.-730    	; 0x126 <LCD_Cursor>
		LCD_WriteData(score[i]);
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	a8 de       	rcall	.-688    	; 0x154 <LCD_WriteData>
 404:	42 e0       	ldi	r20, 0x02	; 2
		trig = 1;
		game = 1;
		
		if(dead == 2)
 406:	e4 16       	cp	r14, r20
 408:	f1 04       	cpc	r15, r1
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	55 c1       	rjmp	.+682    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 40e:	4f c1       	rjmp	.+670    	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 410:	8d 85       	ldd	r24, Y+13	; 0x0d
		PORTA = ~(0x00);
		PORTD = 0xA3;
		//PORTB = 0x01;
		}
			
			if(temp == 0x04 && trig == 1){
 412:	84 30       	cpi	r24, 0x04	; 4
 414:	19 f5       	brne	.+70     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 416:	21 30       	cpi	r18, 0x01	; 1
 418:	31 05       	cpc	r19, r1
 41a:	81 f5       	brne	.+96     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 41c:	9d e0       	ldi	r25, 0x0D	; 13
				//score = score + 1;
				if (i == 13) { i = 0;};
 41e:	89 16       	cp	r8, r25
 420:	91 04       	cpc	r9, r1
 422:	61 f4       	brne	.+24     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 424:	81 2c       	mov	r8, r1
 426:	91 2c       	mov	r9, r1
 428:	09 c0       	rjmp	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 42a:	c4 2c       	mov	r12, r4
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
		LCD_Cursor(29);
		LCD_WriteData(score[i]);
		trig = 1;
		game = 1;
 42c:	d5 2c       	mov	r13, r5
 42e:	0f 2e       	mov	r0, r31
		
		if(dead == 2)
		{dead = 3;
 430:	f3 e0       	ldi	r31, 0x03	; 3
 432:	ef 2e       	mov	r14, r31
 434:	f0 2d       	mov	r31, r0
 436:	f1 2c       	mov	r15, r1
		
		
		if(temp == 0x02 || dead == 2){
			LCD_ClearScreen();
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
 438:	81 2c       	mov	r8, r1
 43a:	91 2c       	mov	r9, r1
		}
			
			if(temp == 0x04 && trig == 1){
				//score = score + 1;
				if (i == 13) { i = 0;};
				i = i +1;
 43c:	4f ef       	ldi	r20, 0xFF	; 255
 43e:	84 1a       	sub	r8, r20
 440:	94 0a       	sbc	r9, r20
				LCD_Cursor(29);
 442:	8d e1       	ldi	r24, 0x1D	; 29
 444:	70 de       	rcall	.-800    	; 0x126 <LCD_Cursor>
				LCD_WriteData(score[i]);
 446:	e1 e0       	ldi	r30, 0x01	; 1
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	e8 0d       	add	r30, r8
 450:	f9 1d       	adc	r31, r9
 452:	80 81       	ld	r24, Z
 454:	7f de       	rcall	.-770    	; 0x154 <LCD_WriteData>
 456:	24 2d       	mov	r18, r4
 458:	35 2d       	mov	r19, r5
				//if(sound == 2)
				//{PORTB = 0x00;
					//sound = 0;}
				
			
			if(temp == 0x06)
 45a:	10 c0       	rjmp	.+32     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 45c:	8d 85       	ldd	r24, Y+13	; 0x0d
 45e:	86 30       	cpi	r24, 0x06	; 6
			{
				LCD_ClearScreen();
 460:	69 f4       	brne	.+26     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 462:	5e de       	rcall	.-836    	; 0x120 <LCD_ClearScreen>
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
 464:	66 e3       	ldi	r22, 0x36	; 54
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	7d de       	rcall	.-774    	; 0x166 <LCD_DisplayString>
				trig = 0;
				
			//	PORTB = 0x04;
			}
			
			switch(drop){
 46c:	08 30       	cpi	r16, 0x08	; 8
 46e:	11 05       	cpc	r17, r1
 470:	08 f0       	brcs	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	4e c0       	rjmp	.+156    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 474:	f8 01       	movw	r30, r16
 476:	ea 5b       	subi	r30, 0xBA	; 186
 478:	ff 4f       	sbci	r31, 0xFF	; 255
 47a:	29 c1       	rjmp	.+594    	; 0x6ce <__tablejump2__>
 47c:	08 30       	cpi	r16, 0x08	; 8
 47e:	11 05       	cpc	r17, r1
 480:	08 f0       	brcs	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	43 c0       	rjmp	.+134    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 484:	f8 01       	movw	r30, r16
 486:	e2 5b       	subi	r30, 0xB2	; 178
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	21 c1       	rjmp	.+578    	; 0x6ce <__tablejump2__>
 48c:	20 e0       	ldi	r18, 0x00	; 0
			
			if(temp == 0x06)
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
				trig = 0;
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	81 e4       	ldi	r24, 0x41	; 65
			
			switch(drop){
				
				case 1:
						{
							PORTB = 0x41;
 492:	85 b9       	out	0x05, r24	; 5
 494:	01 e0       	ldi	r16, 0x01	; 1
							break;
 496:	10 e0       	ldi	r17, 0x00	; 0
 498:	38 c0       	rjmp	.+112    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 49a:	20 e0       	ldi	r18, 0x00	; 0
			
			if(temp == 0x06)
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
				trig = 0;
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	81 e2       	ldi	r24, 0x21	; 33
							PORTB = 0x41;
							break;
						}
				case 2:
				{
					PORTB = 0x21;
 4a0:	85 b9       	out	0x05, r24	; 5
 4a2:	02 e0       	ldi	r16, 0x02	; 2
					break;
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	31 c0       	rjmp	.+98     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
			
			if(temp == 0x06)
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
				trig = 0;
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	81 e3       	ldi	r24, 0x31	; 49
					PORTB = 0x21;
					break;
				}
			   case 3:
			 {
				 PORTB = 0x31;
 4ae:	85 b9       	out	0x05, r24	; 5
 4b0:	03 e0       	ldi	r16, 0x03	; 3
				 break;
 4b2:	10 e0       	ldi	r17, 0x00	; 0
 4b4:	2a c0       	rjmp	.+84     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4b6:	20 e0       	ldi	r18, 0x00	; 0
			
			if(temp == 0x06)
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
				trig = 0;
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	89 e0       	ldi	r24, 0x09	; 9
				 PORTB = 0x31;
				 break;
			 }
			 	case 4:
			 	{
				 	PORTB = 0x09;
 4bc:	85 b9       	out	0x05, r24	; 5
 4be:	04 e0       	ldi	r16, 0x04	; 4
				 	break;
 4c0:	10 e0       	ldi	r17, 0x00	; 0
 4c2:	23 c0       	rjmp	.+70     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4c4:	20 e0       	ldi	r18, 0x00	; 0
			
			if(temp == 0x06)
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
				trig = 0;
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	85 e0       	ldi	r24, 0x05	; 5
				 	PORTB = 0x09;
				 	break;
			 	}
			 	case 5:
			 	{
				 	PORTB = 0x05;
 4ca:	85 b9       	out	0x05, r24	; 5
				 	break;
 4cc:	05 e0       	ldi	r16, 0x05	; 5
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	1c c0       	rjmp	.+56     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
			
			if(temp == 0x06)
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
				trig = 0;
 4d2:	20 e0       	ldi	r18, 0x00	; 0
				 	PORTB = 0x05;
				 	break;
			 	}
			 	case 6:
			 	{
				 	PORTB = 0x03;
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	83 e0       	ldi	r24, 0x03	; 3
				 	break;
 4d8:	85 b9       	out	0x05, r24	; 5
 4da:	06 e0       	ldi	r16, 0x06	; 6
 4dc:	10 e0       	ldi	r17, 0x00	; 0
			 	}
				 	case 7:
				 	{
					 	PORTB = 0xFF;
 4de:	15 c0       	rjmp	.+42     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
						 PORTA = 0X00;
 4e0:	35 b8       	out	0x05, r3	; 5
						 PORTC = 0x00;
 4e2:	12 b8       	out	0x02, r1	; 2
						 
						 LCD_ClearScreen();
 4e4:	18 b8       	out	0x08, r1	; 8
 4e6:	1c de       	rcall	.-968    	; 0x120 <LCD_ClearScreen>
						 LCD_DisplayString(1, "You Lost!");
 4e8:	63 e5       	ldi	r22, 0x53	; 83
 4ea:	71 e0       	ldi	r23, 0x01	; 1
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	3b de       	rcall	.-906    	; 0x166 <LCD_DisplayString>
 4f0:	c4 2c       	mov	r12, r4
						 trig = 0;
						 drop = 0;
						 game = 1;
 4f2:	d5 2c       	mov	r13, r5
 4f4:	e4 2c       	mov	r14, r4
						 dead = 1;
 4f6:	f5 2c       	mov	r15, r5
						 PORTC = 0x00;
						 
						 LCD_ClearScreen();
						 LCD_DisplayString(1, "You Lost!");
						 trig = 0;
						 drop = 0;
 4f8:	00 e0       	ldi	r16, 0x00	; 0
 4fa:	10 e0       	ldi	r17, 0x00	; 0
 4fc:	09 c0       	rjmp	.+18     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			
			if(temp == 0x06)
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, "Goodbye, Thanks For Playing!");
				trig = 0;
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
						 dead = 1;
					 	break;
				 	}
				 	case 0:
				 	{
					 	PORTB = 0x81;
 502:	81 e8       	ldi	r24, 0x81	; 129
 504:	85 b9       	out	0x05, r24	; 5
					 	break;
 506:	00 e0       	ldi	r16, 0x00	; 0
 508:	10 e0       	ldi	r17, 0x00	; 0
			
			
			//if(temp == 0x07)
			//PORTB = 0x03;
			
	if(trig == 0 && game == 0)
 50a:	21 15       	cp	r18, r1
 50c:	31 05       	cpc	r19, r1
 50e:	69 f4       	brne	.+26     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 510:	c1 14       	cp	r12, r1
 512:	d1 04       	cpc	r13, r1
 514:	91 f4       	brne	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
{
		tick_LCD();
 516:	b7 de       	rcall	.-658    	; 0x286 <tick_LCD>
 518:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <TimerFlag>
		while(!TimerFlag);
 51c:	88 23       	and	r24, r24
 51e:	e1 f3       	breq	.-8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 520:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <TimerFlag>
		TimerFlag = 0; 
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	58 cf       	rjmp	.-336    	; 0x3da <main+0x98>
 52a:	21 30       	cpi	r18, 0x01	; 1
}
else if (trig ==1 && game == 1 && past == 2800 ||  dead == 3 && past == 2800 ){
 52c:	31 05       	cpc	r19, r1
 52e:	39 f4       	brne	.+14     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	c9 16       	cp	r12, r25
 534:	d1 04       	cpc	r13, r1
 536:	19 f4       	brne	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 538:	07 c0       	rjmp	.+14     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	43 e0       	ldi	r20, 0x03	; 3
 540:	e4 16       	cp	r14, r20
 542:	f1 04       	cpc	r15, r1
 544:	09 f0       	breq	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 546:	73 c0       	rjmp	.+230    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 548:	80 ef       	ldi	r24, 0xF0	; 240
 54a:	a8 16       	cp	r10, r24
 54c:	8a e0       	ldi	r24, 0x0A	; 10
 54e:	b8 06       	cpc	r11, r24
 550:	09 f0       	breq	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 552:	6d c0       	rjmp	.+218    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 554:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <TimerFlag>
	while(!TimerFlag);
 558:	88 23       	and	r24, r24
 55a:	e1 f3       	breq	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 55c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <TimerFlag>
	TimerFlag = 0;
 560:	0f 5f       	subi	r16, 0xFF	; 255
		drop = drop + 1;
 562:	1f 4f       	sbci	r17, 0xFF	; 255
 564:	8e 85       	ldd	r24, Y+14	; 0x0e
		past = 0;
		dead = 0;
		//x = ADC;
		//unsigned char y = ADC;
		
		if(x > left){
 566:	9f 85       	ldd	r25, Y+15	; 0x0f
 568:	8d 3b       	cpi	r24, 0xBD	; 189
 56a:	92 40       	sbci	r25, 0x02	; 2
 56c:	48 f0       	brcs	.+18     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 56e:	8d ef       	ldi	r24, 0xFD	; 253
			
			if(move == -3)
 570:	68 16       	cp	r6, r24
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	78 06       	cpc	r7, r24
 576:	09 f4       	brne	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 578:	93 c0       	rjmp	.+294    	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 57a:	91 e0       	ldi	r25, 0x01	; 1
			{
				move = -3;
			}
			else
			move = move - 1;
 57c:	69 1a       	sub	r6, r25
 57e:	71 08       	sbc	r7, r1
 580:	8e 85       	ldd	r24, Y+14	; 0x0e
			
			
		}
		if(x < right){
 582:	9f 85       	ldd	r25, Y+15	; 0x0f
 584:	8c 32       	cpi	r24, 0x2C	; 44
 586:	91 40       	sbci	r25, 0x01	; 1
 588:	38 f4       	brcc	.+14     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 58a:	82 e0       	ldi	r24, 0x02	; 2
			//	PORTA =
			if(move == 2)
 58c:	68 16       	cp	r6, r24
 58e:	71 04       	cpc	r7, r1
 590:	31 f1       	breq	.+76     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 592:	9f ef       	ldi	r25, 0xFF	; 255
			{
				move = 2;
			}
			else{
			move = move + 1;}
 594:	69 1a       	sub	r6, r25
 596:	79 0a       	sbc	r7, r25
 598:	4f ef       	ldi	r20, 0xFF	; 255
			
		}
		
		switch(move){
 59a:	64 16       	cp	r6, r20
 59c:	74 06       	cpc	r7, r20
 59e:	59 f1       	breq	.+86     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5a0:	5c f4       	brge	.+22     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5a2:	9d ef       	ldi	r25, 0xFD	; 253
 5a4:	69 16       	cp	r6, r25
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	79 06       	cpc	r7, r25
 5aa:	89 f1       	breq	.+98     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 5ac:	4e ef       	ldi	r20, 0xFE	; 254
 5ae:	64 16       	cp	r6, r20
 5b0:	4f ef       	ldi	r20, 0xFF	; 255
 5b2:	74 06       	cpc	r7, r20
 5b4:	41 f1       	breq	.+80     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5b6:	0d cf       	rjmp	.-486    	; 0x3d2 <main+0x90>
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	68 16       	cp	r6, r24
 5bc:	71 04       	cpc	r7, r1
 5be:	39 f0       	breq	.+14     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c0:	7c f1       	brlt	.+94     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 5c2:	42 e0       	ldi	r20, 0x02	; 2
 5c4:	64 16       	cp	r6, r20
 5c6:	71 04       	cpc	r7, r1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5ca:	03 cf       	rjmp	.-506    	; 0x3d2 <main+0x90>
 5cc:	08 c0       	rjmp	.+16     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5ce:	32 b8       	out	0x02, r3	; 2
			
			case 1:
			{
				PORTA = ~(0x00);
 5d0:	81 e7       	ldi	r24, 0x71	; 113
				PORTD = 0x71;
 5d2:	8b b9       	out	0x0b, r24	; 11
 5d4:	a1 2c       	mov	r10, r1
}
else if (trig ==1 && game == 1 && past == 2800 ||  dead == 3 && past == 2800 ){
	while(!TimerFlag);
	TimerFlag = 0;
		drop = drop + 1;
		past = 0;
 5d6:	b1 2c       	mov	r11, r1
 5d8:	e1 2c       	mov	r14, r1
		dead = 0;
 5da:	f1 2c       	mov	r15, r1
 5dc:	fe ce       	rjmp	.-516    	; 0x3da <main+0x98>
			
			case 1:
			{
				PORTA = ~(0x00);
				PORTD = 0x71;
				break;
 5de:	32 b8       	out	0x02, r3	; 2
			}
			case 2:
			{
				PORTA = ~(0x00);
 5e0:	98 ef       	ldi	r25, 0xF8	; 248
				PORTD = ~(0x07);
 5e2:	9b b9       	out	0x0b, r25	; 11
 5e4:	a1 2c       	mov	r10, r1
}
else if (trig ==1 && game == 1 && past == 2800 ||  dead == 3 && past == 2800 ){
	while(!TimerFlag);
	TimerFlag = 0;
		drop = drop + 1;
		past = 0;
 5e6:	b1 2c       	mov	r11, r1
 5e8:	e1 2c       	mov	r14, r1
		dead = 0;
 5ea:	f1 2c       	mov	r15, r1
 5ec:	68 94       	set
			}
			case 2:
			{
				PORTA = ~(0x00);
				PORTD = ~(0x07);
				break;
 5ee:	66 24       	eor	r6, r6
 5f0:	61 f8       	bld	r6, 1
 5f2:	71 2c       	mov	r7, r1
 5f4:	f2 ce       	rjmp	.-540    	; 0x3da <main+0x98>
 5f6:	32 b8       	out	0x02, r3	; 2
			}
			case -1:
			{
				PORTA = ~(0x00);
 5f8:	47 e0       	ldi	r20, 0x07	; 7
				PORTD = ~(0xF8);
 5fa:	4b b9       	out	0x0b, r20	; 11
 5fc:	a1 2c       	mov	r10, r1
}
else if (trig ==1 && game == 1 && past == 2800 ||  dead == 3 && past == 2800 ){
	while(!TimerFlag);
	TimerFlag = 0;
		drop = drop + 1;
		past = 0;
 5fe:	b1 2c       	mov	r11, r1
 600:	e1 2c       	mov	r14, r1
		dead = 0;
 602:	f1 2c       	mov	r15, r1
 604:	ea ce       	rjmp	.-556    	; 0x3da <main+0x98>
			}
			case -1:
			{
				PORTA = ~(0x00);
				PORTD = ~(0xF8);
				break;
 606:	8f ee       	ldi	r24, 0xEF	; 239
			}
			case -2:
			{
				PORTA = ~(0x10);
 608:	82 b9       	out	0x02, r24	; 2
 60a:	8f e0       	ldi	r24, 0x0F	; 15
				PORTD = ~(0xF0);
 60c:	8b b9       	out	0x0b, r24	; 11
 60e:	9f ec       	ldi	r25, 0xCF	; 207
			}
			case -3:
			{
				PORTA = ~(0x30);
 610:	92 b9       	out	0x02, r25	; 2
 612:	4f ed       	ldi	r20, 0xDF	; 223
				PORTD = ~(0x20);
 614:	4b b9       	out	0x0b, r20	; 11
 616:	a1 2c       	mov	r10, r1
}
else if (trig ==1 && game == 1 && past == 2800 ||  dead == 3 && past == 2800 ){
	while(!TimerFlag);
	TimerFlag = 0;
		drop = drop + 1;
		past = 0;
 618:	b1 2c       	mov	r11, r1
 61a:	e1 2c       	mov	r14, r1
		dead = 0;
 61c:	f1 2c       	mov	r15, r1
 61e:	dd ce       	rjmp	.-582    	; 0x3da <main+0x98>
			}
			case -3:
			{
				PORTA = ~(0x30);
				PORTD = ~(0x20);
				break;
 620:	32 b8       	out	0x02, r3	; 2
			}
			case 0:
			{
				PORTA = ~(0x00);
 622:	2b b8       	out	0x0b, r2	; 11
				PORTD = (0xA3);
 624:	a1 2c       	mov	r10, r1
}
else if (trig ==1 && game == 1 && past == 2800 ||  dead == 3 && past == 2800 ){
	while(!TimerFlag);
	TimerFlag = 0;
		drop = drop + 1;
		past = 0;
 626:	b1 2c       	mov	r11, r1
 628:	e1 2c       	mov	r14, r1
		dead = 0;
 62a:	f1 2c       	mov	r15, r1
 62c:	d6 ce       	rjmp	.-596    	; 0x3da <main+0x98>
			}
			case 0:
			{
				PORTA = ~(0x00);
				PORTD = (0xA3);
				break;
 62e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <TimerFlag>
		}
		
		
	
}
else{while(!TimerFlag);
 632:	88 23       	and	r24, r24
 634:	e1 f3       	breq	.-8      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 636:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <TimerFlag>
	TimerFlag = 0;
 63a:	88 ec       	ldi	r24, 0xC8	; 200
	past = past + 200;
 63c:	a8 0e       	add	r10, r24
 63e:	b1 1c       	adc	r11, r1
 640:	91 e0       	ldi	r25, 0x01	; 1
		if (dead == 1 && past == 3000)
 642:	e9 16       	cp	r14, r25
 644:	f1 04       	cpc	r15, r1
 646:	09 f0       	breq	.+2      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 648:	c8 ce       	rjmp	.-624    	; 0x3da <main+0x98>
 64a:	48 eb       	ldi	r20, 0xB8	; 184
 64c:	a4 16       	cp	r10, r20
 64e:	4b e0       	ldi	r20, 0x0B	; 11
 650:	b4 06       	cpc	r11, r20
		{dead = 2;
		if (dead != 0)
		PORTB = 0xFF;
 652:	09 f0       	breq	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
		PORTA = (0x00);
 654:	c2 ce       	rjmp	.-636    	; 0x3da <main+0x98>
		PORTD = 0x00;
 656:	35 b8       	out	0x05, r3	; 5
}
else{while(!TimerFlag);
	TimerFlag = 0;
	past = past + 200;
		if (dead == 1 && past == 3000)
		{dead = 2;
 658:	12 b8       	out	0x02, r1	; 2
 65a:	1b b8       	out	0x0b, r1	; 11
 65c:	68 94       	set
 65e:	ee 24       	eor	r14, r14
 660:	e1 f8       	bld	r14, 1
		temp = ~PINA & 0x07;
		
		
		
		if(temp == 0x02 || dead == 2){
			LCD_ClearScreen();
 662:	f1 2c       	mov	r15, r1
 664:	ba ce       	rjmp	.-652    	; 0x3da <main+0x98>
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
 666:	5c dd       	rcall	.-1352   	; 0x120 <LCD_ClearScreen>
 668:	69 e1       	ldi	r22, 0x19	; 25
 66a:	71 e0       	ldi	r23, 0x01	; 1
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	7b dd       	rcall	.-1290   	; 0x166 <LCD_DisplayString>
		i = 0;
		LCD_Cursor(29);
 670:	8d e1       	ldi	r24, 0x1D	; 29
 672:	59 dd       	rcall	.-1358   	; 0x126 <LCD_Cursor>
 674:	89 81       	ldd	r24, Y+1	; 0x01
		LCD_WriteData(score[i]);
 676:	6e dd       	rcall	.-1316   	; 0x154 <LCD_WriteData>
 678:	81 e8       	ldi	r24, 0x81	; 129
 67a:	85 b9       	out	0x05, r24	; 5
		{dead = 3;
		
		}
		
		
		PORTB = 0x81;
 67c:	32 b8       	out	0x02, r3	; 2
 67e:	2b b8       	out	0x0b, r2	; 11
		PORTA = ~(0x00);
 680:	8d 85       	ldd	r24, Y+13	; 0x0d
		PORTD = 0xA3;
 682:	84 30       	cpi	r24, 0x04	; 4
		//PORTB = 0x01;
		}
			
			if(temp == 0x04 && trig == 1){
 684:	09 f4       	brne	.+2      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 686:	d1 ce       	rjmp	.-606    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 688:	c4 2c       	mov	r12, r4
 68a:	d5 2c       	mov	r13, r5
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
		LCD_Cursor(29);
		LCD_WriteData(score[i]);
		trig = 1;
		game = 1;
 68c:	0f 2e       	mov	r0, r31
 68e:	f3 e0       	ldi	r31, 0x03	; 3
		
		if(dead == 2)
		{dead = 3;
 690:	ef 2e       	mov	r14, r31
 692:	f0 2d       	mov	r31, r0
 694:	f1 2c       	mov	r15, r1
 696:	24 2d       	mov	r18, r4
 698:	35 2d       	mov	r19, r5
			LCD_ClearScreen();
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
		LCD_Cursor(29);
		LCD_WriteData(score[i]);
		trig = 1;
 69a:	81 2c       	mov	r8, r1
 69c:	91 2c       	mov	r9, r1
		
		
		if(temp == 0x02 || dead == 2){
			LCD_ClearScreen();
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
 69e:	de ce       	rjmp	.-580    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 6a0:	8e 85       	ldd	r24, Y+14	; 0x0e
 6a2:	9f 85       	ldd	r25, Y+15	; 0x0f
			else
			move = move - 1;
			
			
		}
		if(x < right){
 6a4:	8c 32       	cpi	r24, 0x2C	; 44
 6a6:	91 40       	sbci	r25, 0x01	; 1
 6a8:	08 f4       	brcc	.+2      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 6aa:	73 cf       	rjmp	.-282    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 6ac:	b0 cf       	rjmp	.-160    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 6ae:	0f 2e       	mov	r0, r31
 6b0:	f3 e0       	ldi	r31, 0x03	; 3
		LCD_WriteData(score[i]);
		trig = 1;
		game = 1;
		
		if(dead == 2)
		{dead = 3;
 6b2:	ef 2e       	mov	r14, r31
 6b4:	f0 2d       	mov	r31, r0
 6b6:	f1 2c       	mov	r15, r1
 6b8:	81 e8       	ldi	r24, 0x81	; 129
 6ba:	85 b9       	out	0x05, r24	; 5
		
		}
		
		
		PORTB = 0x81;
 6bc:	32 b8       	out	0x02, r3	; 2
 6be:	2b b8       	out	0x0b, r2	; 11
		PORTA = ~(0x00);
 6c0:	c4 2c       	mov	r12, r4
		PORTD = 0xA3;
 6c2:	d5 2c       	mov	r13, r5
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
		LCD_Cursor(29);
		LCD_WriteData(score[i]);
		trig = 1;
		game = 1;
 6c4:	24 2d       	mov	r18, r4
 6c6:	35 2d       	mov	r19, r5
			LCD_ClearScreen();
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
		LCD_Cursor(29);
		LCD_WriteData(score[i]);
		trig = 1;
 6c8:	81 2c       	mov	r8, r1
 6ca:	91 2c       	mov	r9, r1
		
		
		if(temp == 0x02 || dead == 2){
			LCD_ClearScreen();
		LCD_DisplayString(1, "High Score: 100 Your Score: ");
		i = 0;
 6cc:	c7 ce       	rjmp	.-626    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>

000006ce <__tablejump2__>:
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	00 24       	eor	r0, r0
 6d4:	00 1c       	adc	r0, r0
 6d6:	0b be       	out	0x3b, r0	; 59
 6d8:	07 90       	elpm	r0, Z+
 6da:	f6 91       	elpm	r31, Z
 6dc:	e0 2d       	mov	r30, r0
 6de:	09 94       	ijmp

000006e0 <_exit>:
 6e0:	f8 94       	cli

000006e2 <__stop_program>:
 6e2:	ff cf       	rjmp	.-2      	; 0x6e2 <__stop_program>
